{"version":3,"sources":["components/AddReminder.js","components/TimerTileComponent.js","components/TimersContainer.js","App.js","serviceWorker.js","index.js"],"names":["AddReminder","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","key","setState","defineProperty","target","value","handleFormSubmit","preventDefault","_this$state","state","title","type","time","length","alert","props","addNewTimer","toggleForm","adding","bind","assertThisInitialized","previousState","_this2","displayToggle","positionToggle","displayText","react_default","a","createElement","className","onClick","style","display","position","top","backgroundColor","width","placeholder","onChange","event","name","Component","TimerTileComponent","_this$props","TimersContainer","renderTimers","timers","map","timer","id","TimerTileComponent_TimerTileComponent","removeTimer","App","idCounter","componentDidMount","chrome","storage","sync","get","items","newTimer","concat","toConsumableArray","set","updatedTimers","filter","components_AddReminder","TimersContainer_TimersContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59349103.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass AddReminder extends Component{\n    constructor (){\n        super()\n        this.state = {\n            adding: false,\n            title: \"\",\n            type: \"cycle\", \n            time: \"15\"\n        }\n        this.toggleForm = this.toggleForm.bind(this)\n    }\n\n    toggleForm(){\n        this.setState(previousState => ({\n            adding: !previousState.adding\n        }))\n    }\n\n    // keeps track of input changes and stores them in state, to submit later\n    handleChange = (e, key) => {\n        // console.log(key, e.target.value)\n        this.setState({ [key]: e.target.value })\n    }\n\n    // 1. on form submit, if no title, prompts user to add one (can make pretty pop up later)\n    // 2. takes the title, type, and time from state and submits it to App\n    // so the data can be passed onto the next component\n    // 3. closes the input form and resets the state for the next time it is opened\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        const { title, type, time } = this.state;\n        // console.log(title, type, time);\n        if (title.length === 0) {\n            alert('Please enter a timer title!');\n            \n        } else {\n            this.props.addNewTimer(title, type, time);\n            this.toggleForm()\n            this.setState({\n                title: \"\",\n                type: \"cycle\", \n                time: \"15\"\n            }) \n        }\n    }\n\n    render(){\n        let displayToggle = (this.state.adding) ? \"block\" : \"none\"\n        let positionToggle = (this.state.adding) ? \"absolute\" : \"none\"\n        let displayText = (this.state.adding)? \"Close\" : \"Add Reminder\"\n        return(\n            <div className=\"reminder_set\">\n                <button className=\"reminder_button reminder_add\" onClick={this.toggleForm}>{displayText}</button>\n                <form \n                    className=\"reminder_form\" \n                    style={{\"display\": displayToggle, \n                            \"position\": positionToggle, \n                            \"top\": 100, \n                            \"backgroundColor\": \"#d8d8d8\",\n                            \"width\": \"100%\",\n                        }}\n                >\n                    <p> Reminder Title: \n                        <input \n                            type=\"text\" \n                            placeholder=\"Reminder Title\"\n                            onChange={(event) => this.handleChange(event, 'title')}\n                            value={this.state.title}\n                        >\n                        </input>\n                    </p>\n                    <p> Reminder Type: \n                        <select \n                            name=\"reminder_type\" \n                            onChange={(event) => this.handleChange(event, 'type')}\n                            value={this.state.type}\n                        >\n                            <option value=\"cycle\">Cycled</option>\n                            <option value=\"once\">Once</option>\n                        </select>\n                    </p>\n                    <p> Select time: \n                        <select \n                            name=\"reminder_type\"\n                            onChange={(event) => this.handleChange(event, 'time')}\n                            value={this.state.time}\n                        >\n                            <option value=\"15\">15</option>\n                            <option value=\"20\">20</option>\n                            <option value=\"25\">25</option>\n                            <option value=\"30\">30</option>\n                        </select>\n                        min\n                    </p>\n                    <button onClick={this.handleFormSubmit} className=\"reminder_button reminder_save\">Save</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddReminder","import React, { Component } from 'react';\nimport '../stylesheets/timerTileComponent.css';\n\nexport default class TimerTileComponent extends Component {\n\trender() {\n\t\tconst { title, type, time } = this.props;\n\t\treturn (\n\t\t\t<div className='timer-tile-container'>\n\t\t\t\t<div className='title'>\n\t\t\t\t\t{title}\n\t\t\t\t</div>\n\t\t\t\t<div className='type'>\n\t\t\t\t\t{type}\n\t\t\t\t</div>\n\t\t\t\t<div className='time'>\n\t\t\t\t\t{time}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nimport IndividualTimer from './TimerTileComponent';\n\nexport default class TimersContainer extends Component {\n\t// if timers, maps thru and renders each timer\n\trenderTimers = () => {\n\t\tif (this.props.timers.length > 0) {\n\t\t\treturn (\n\t\t\t\tthis.props.timers.map(timer => \n\t\t\t\t\t<div className='timer-tile' key={timer.id}>\n\t\t\t\t\t\t<IndividualTimer \n\t\t\t\t\t\t\ttitle={timer.title}\n\t\t\t\t\t\t\ttype={timer.type}\n\t\t\t\t\t\t\ttime={timer.time}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={()=>this.props.removeTimer(timer.id)}>delete me{timer.id}</button>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t)\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>no timers :(</div>\n\t\t\t)\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='timers-container'>\n\t\t\t\t{this.renderTimers()}\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AddReminder from './components/AddReminder';\nimport TimersContainer from './components/TimersContainer';\n/* global chrome */\n\nclass App extends Component {\n  state = {\n    timers: [],\n    idCounter: 1,\n  }\n\n  componentDidMount = () => {\n\t\tif (chrome.storage) {\n\t\t\tchrome.storage.sync.get(['timers', 'idCounter'], (items) => {\n        alert('timers retrieved!');\n        if (items.idCounter) {\n          this.setState({\n            timers: items.timers.map(timer => timer),\n            idCounter: items.idCounter\n          })\n        } else {\n          this.setState({\n            timers: items.timers.map(timer => timer),\n          })\n        }\n\t\t\t});\n\t\t}\n  }\n\n  // addNewTimer is called in & gets its data from AddReminder, \n  // it adds timers to the App state & chrome.storage,  \n  // then timers are passed on to TimersContainer to render\n  // chrome.storage is used for actual extension, using this.state.timers to style in localhost\n  addNewTimer = (title, type, time) => {\n    let id = this.state.idCounter !== 1 ? this.state.idCounter : 1\n    let newTimer = {\n      'id': id,\n      'title': title, \n      'type': type,\n      'time': time,\n    }\n\n    this.setState({\n      timers: [...this.state.timers, newTimer],\n      idCounter: this.state.idCounter + 1,\n    })\n\n    if (chrome.storage) {\n      chrome.storage.sync.set({\n        'timers': [...this.state.timers, newTimer],\n        'idCounter': id\n      }, () => {\n        alert('timer saved!to chrome storage' );\n      });\n    } else {\n      alert('timer not saved to chrome storage');\n    }\n  }\n\n  //removes entire individual timer from the list of timers\n  removeTimer = (id) => {\n    const { timers } = this.state;\n    let updatedTimers = timers.filter(timer => timer.id !== id);\n    if (chrome.storage) {\n      chrome.storage.sync.set({'timers': updatedTimers}, () => {\n        alert('timers updated!to chrome storage' );\n      })\n    } \n    this.setState({\n      timers: updatedTimers\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App practice-styles\">\n        <div className=\"header\">Reminder App</div>\n        <AddReminder addNewTimer={this.addNewTimer} />\n        <TimersContainer timers={this.state.timers} removeTimer={this.removeTimer} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}