{"version":3,"sources":["AddReminder.js","App.js","serviceWorker.js","index.js"],"names":["AddReminder","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","adding","toggleForm","bind","assertThisInitialized","setState","previousState","displayToggle","displayText","react_default","a","createElement","className","onClick","style","display","type","placeholder","name","value","Component","App","src_AddReminder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOA4CeA,cAzCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAACC,QAAQ,GACtBR,EAAKS,WAAaT,EAAKS,WAAWC,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHRA,4EAMVG,KAAKS,SAAS,SAAAC,GAAa,MAAK,CAC5BL,QAASK,EAAcL,2CAI3B,IAAIM,EAAiBX,KAAKI,MAAMC,OAAU,QAAU,OAChDO,EAAeZ,KAAKI,MAAMC,OAAS,QAAU,eACjD,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAA+BC,QAASjB,KAAKM,YAAaM,GAC5EC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBE,MAAO,CAACC,QAAWR,IAC/CE,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,YAAY,oBACnDR,EAAAC,EAAAC,cAAA,2BACIF,EAAAC,EAAAC,cAAA,UAAQO,KAAK,iBACTT,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,SAAd,UACAV,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,QAAd,UAGRV,EAAAC,EAAAC,cAAA,yBACIF,EAAAC,EAAAC,cAAA,UAAQO,KAAK,iBACTT,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,MAAd,MACAV,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,MAAd,MACAV,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,MAAd,MACAV,EAAAC,EAAAC,cAAA,UAAQQ,MAAM,MAAd,OALR,OASAV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iCAAlB,iBAlCMQ,aCaXC,mLATX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,gBACAH,EAAAC,EAAAC,cAACW,EAAD,cALUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ae1227be.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddReminder extends Component{\r\n    constructor (){\r\n        super()\r\n        this.state = {adding: false}\r\n        this.toggleForm = this.toggleForm.bind(this)\r\n    }\r\n    toggleForm(){\r\n        this.setState(previousState => ({\r\n            adding: !previousState.adding\r\n        }))\r\n    }\r\n    render(){\r\n        let displayToggle = (this.state.adding) ? \"block\" : \"none\"\r\n        let displayText = (this.state.adding)? \"Close\" : \"Add Reminder\"\r\n        return(\r\n            <div className=\"reminder_set\">\r\n                <button className=\"reminder_button reminder_add\" onClick={this.toggleForm}>{displayText}</button>\r\n                <form className=\"reminder_form\" style={{\"display\": displayToggle}}>\r\n                    <p> Reminder Title: <input type=\"text\" placeholder=\"Reminder Title\"></input></p>\r\n                    <p> Reminder Type: \r\n                        <select name=\"reminder_type\">\r\n                            <option value=\"cycle\">Cycled</option>\r\n                            <option value=\"once\">Once</option>\r\n                        </select>\r\n                    </p>\r\n                    <p> Select time: \r\n                        <select name=\"reminder_type\">\r\n                            <option value=\"15\">15</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"30\">30</option>\r\n                        </select>\r\n                        min\r\n                    </p>\r\n                    <button className=\"reminder_button reminder_save\">Save</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AddReminder","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AddReminder from './AddReminder'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App practice-styles\">\r\n        <div className=\"header\">Reminder App</div>\r\n        <AddReminder />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}