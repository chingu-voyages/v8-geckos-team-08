{"version":3,"sources":["components/AddReminder.js","components/TimerTileComponent.js","components/TimersContainer.js","App.js","serviceWorker.js","index.js"],"names":["AddReminder","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","key","setState","defineProperty","target","value","handleFormSubmit","preventDefault","_this$state","state","title","type","time","length","alert","props","addNewTimer","toggleForm","adding","bind","assertThisInitialized","previousState","_this2","displayToggle","positionToggle","displayText","react_default","a","createElement","className","onClick","style","display","position","top","placeholder","onChange","event","name","Component","TimerTileComponent","componentDidMount","countdown","seconds","timerId","id","parseInt","sessionStorage","getItem","concat","tick","setItem","counter","document","getElementById","current_minutes","current_seconds","innerHTML","setTimeout","_this$props","TimersContainer","renderTimers","timers","map","timer","TimerTileComponent_TimerTileComponent","removeTimer","App","idCounter","timersFromStorage","JSON","parse","localStorage","counterFromStorage","newTimer","updatedTimers","toConsumableArray","updatedCounter","stringify","filter","components_AddReminder","TimersContainer_TimersContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c6338ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddReminder extends Component{\r\n    constructor (){\r\n        super()\r\n        this.state = {\r\n            adding: false,\r\n            title: \"\",\r\n            type: \"cycle\",\r\n            time: \"15\"\r\n        }\r\n        this.toggleForm = this.toggleForm.bind(this)\r\n    }\r\n\r\n    toggleForm(){\r\n        this.setState(previousState => ({\r\n            adding: !previousState.adding\r\n        }))\r\n    }\r\n\r\n    // keeps track of input changes and stores them in state, to submit later\r\n    handleChange = (e, key) => {\r\n        // console.log(key, e.target.value)\r\n        this.setState({ [key]: e.target.value })\r\n    }\r\n\r\n    // 1. on form submit, if no title, prompts user to add one (can make pretty pop up later)\r\n    // 2. takes the title, type, and time from state and submits it to App\r\n    // so the data can be passed onto the next component\r\n    // 3. closes the input form and resets the state for the next time it is opened\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { title, type, time } = this.state;\r\n        // console.log(title, type, time);\r\n        if (title.length === 0) {\r\n            alert('Please enter a timer title!');\r\n\r\n        } else {\r\n            this.props.addNewTimer(title, type, time);\r\n            this.toggleForm()\r\n            this.setState({\r\n                title: \"\",\r\n                type: \"cycle\",\r\n                time: \"15\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let displayToggle = (this.state.adding) ? \"block\" : \"none\"\r\n        let positionToggle = (this.state.adding) ? \"absolute\" : \"none\"\r\n        let displayText = (this.state.adding)? \"Close\" : \"Add Reminder\"\r\n        return(\r\n            <div className=\"reminder_set\">\r\n                <button className=\"reminder_button reminder_add\" onClick={this.toggleForm}>{displayText}</button>\r\n                <form\r\n                    className=\"reminder_form\"\r\n                    style={{\"display\": displayToggle,\r\n                            \"position\": positionToggle,\r\n                            \"top\": 100,\r\n                        }}\r\n                >\r\n                    <p> Reminder Title:\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Reminder Title\"\r\n                            onChange={(event) => this.handleChange(event, 'title')}\r\n                            value={this.state.title}\r\n                        >\r\n                        </input>\r\n                    </p>\r\n                    <p> Reminder Type:\r\n                        <select\r\n                            name=\"reminder_type\"\r\n                            onChange={(event) => this.handleChange(event, 'type')}\r\n                            value={this.state.type}\r\n                        >\r\n                            <option value=\"cycle\">Cycled</option>\r\n                            <option value=\"once\">Once</option>\r\n                        </select>\r\n                    </p>\r\n                    <p> Select time:\r\n                        <select\r\n                            name=\"reminder_type\"\r\n                            onChange={(event) => this.handleChange(event, 'time')}\r\n                            value={this.state.time}\r\n                        >\r\n                            <option value=\"1\">1</option>\r\n                            <option value=\"5\">5</option>\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"15\">15</option>\r\n                            <option value=\"20\">20</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"30\">30</option>\r\n                        </select>\r\n                        min\r\n                    </p>\r\n                    <button onClick={this.handleFormSubmit} className=\"reminder_button reminder_save\">Save</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddReminder\r\n","import React, { Component } from 'react';\r\n\r\nexport default class TimerTileComponent extends Component {\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.countdown(this.props.time * 60);\r\n\t}\r\n\r\n\tcountdown = (seconds) => {\r\n\t\tlet timerId, timerTitle;\r\n\t\tif (this.props) {\r\n\t\t\ttimerId = this.props.id;\r\n\t\t\ttimerTitle = this.props.title;\r\n\t\t }\r\n\t\tseconds = parseInt(sessionStorage.getItem(`${timerId}-seconds`)) || seconds;\r\n\r\n\t\tfunction tick() {\r\n\t\t\tseconds--;\r\n\t\t\tsessionStorage.setItem(`${timerId}-seconds`, seconds)\r\n\t\t\tlet counter = document.getElementById(`${timerId}-timer`);\r\n\t\t\tlet current_minutes = parseInt(seconds / 60);\r\n\t\t\tlet current_seconds = seconds % 60;\r\n\t\t\tif (counter) {\r\n\t\t\t\tcounter.innerHTML = current_minutes + \":\" + (current_seconds < 10 ? \"0\" : \"\") + current_seconds;\r\n\t\t\t}\r\n\r\n\t\t\tif( seconds > 0 ) {\r\n\t\t\t\tsetTimeout(tick, 1000);\r\n\t\t\t}\r\n\t\t}\r\n\t\ttick();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { title, type, time, id } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className='timer-tile-container'>\r\n\t\t\t\t<div className='timer-information'>\r\n\t\t\t\t\t<div className='title'>{title}</div>\r\n\t\t\t\t\t<div className='details'>\r\n\t\t\t\t\t\t{type} / {time}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='timer-countdown'>\r\n\t\t\t\t\t<div id={`${id}-timer`}>{time}:00</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport IndividualTimer from './TimerTileComponent';\r\n\r\nexport default class TimersContainer extends Component {\r\n\t\r\n\trenderTimers = () => {\r\n\t\tif (this.props.timers.length > 0) {\r\n\t\t\treturn (\r\n\t\t\t\tthis.props.timers.map(timer => \r\n\t\t\t\t\t<div className='timer-tile' key={timer.id}>\r\n\t\t\t\t\t\t<IndividualTimer\r\n\t\t\t\t\t\t\ttitle={timer.title}\r\n\t\t\t\t\t\t\ttype={timer.type}\r\n\t\t\t\t\t\t\ttime={timer.time}\r\n\t\t\t\t\t\t\tid={timer.id}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<button className='timer-removeButton' onClick={() => this.props.removeTimer(timer.id)} value={timer.id}>delete me</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='no-timers'>You don't have any timers yet!</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='timers-container'>\r\n\t\t\t\t{this.renderTimers()}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AddReminder from './components/AddReminder';\r\nimport TimersContainer from './components/TimersContainer';\r\nimport './stylesheets/timerTileComponent.css';\r\nimport './stylesheets/buttons.css';\r\nimport './stylesheets/forms.css'; \r\nimport './stylesheets/fonts.css';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    timers: [],\r\n    idCounter: 1,\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let timersFromStorage = JSON.parse(localStorage.getItem(\"timers\"));\r\n    let counterFromStorage = JSON.parse(localStorage.getItem(\"counter\"));\r\n\r\n    if (timersFromStorage) {\r\n      this.setState({\r\n        timers: timersFromStorage,\r\n        idCounter: counterFromStorage,\r\n      })\r\n    }\r\n  }\r\n\r\n  addNewTimer = (title, type, time) => {\r\n    let id = this.state.idCounter !== 1 ? this.state.idCounter : 1\r\n    let newTimer = {\r\n      'id': id,\r\n      'title': title,\r\n      'type': type,\r\n      'time': time,\r\n    }\r\n\r\n    const updatedTimers = [...this.state.timers, newTimer];\r\n    const updatedCounter = this.state.idCounter + 1;\r\n\r\n    this.setState({\r\n      timers: updatedTimers,\r\n      idCounter: updatedCounter,\r\n    })\r\n\r\n    localStorage.setItem(\"timers\", JSON.stringify(updatedTimers));\r\n    localStorage.setItem(\"counter\", JSON.stringify(updatedCounter));\r\n  }\r\n\r\n  //removes entire individual timer from the list of timers\r\n  removeTimer = (id) => {\r\n    const { timers } = this.state;\r\n    let updatedTimers = timers.filter(timer => timer.id !== id);\r\n\r\n    this.setState({\r\n      timers: updatedTimers\r\n    })\r\n\r\n    localStorage.setItem(\"timers\", JSON.stringify(updatedTimers));\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App practice-styles\">\r\n        <div className=\"header\">Remind Me</div>\r\n        <AddReminder addNewTimer={this.addNewTimer} />\r\n        <TimersContainer timers={this.state.timers} removeTimer={this.removeTimer} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}